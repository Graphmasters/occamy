package occamy

import (
	"errors"
)

type ErrKind string

const (
	// ErrKindInternalHandlerError covers situations where the
	// handler encounters an internal error.
	ErrKindInternalHandlerError ErrKind = "internal_handler_error"

	// ErrKindTaskInterrupted is exclusively for when a task
	// (generated by a handler) is interrupted by the occamy
	// server through the context being cancelled.
	ErrKindTaskInterrupted ErrKind = "task_interrupted"

	// ErrKindInvalidBody covers situations where a message
	// was received with invalid bodies.
	ErrKindInvalidBody ErrKind = "invalid_body"

	// ErrKindInvalidHeader covers situations where a message
	// was received with invalid headers.
	ErrKindInvalidHeader ErrKind = "invalid_headers"

	// ErrKindInvalidTask covers situations where the task
	// requested is invalid.
	ErrKindInvalidTask ErrKind = "invalid_task"

	// ErrKindMessageNotAcked is for when the ack method
	// fails for a message.
	ErrKindMessageNotAcked ErrKind = "message_not_acked"

	// ErrKindMessageNotNacked is for when the nack method
	// fails for a message.
	ErrKindMessageNotNacked ErrKind = "message_not_nacked"

	// ErrKindTaskNotAdded is exclusively for when a task
	// (generated by a handler) could not be added.
	ErrKindTaskNotAdded ErrKind = "task_not_added"

	// ErrKindTaskNotKilled is exclusively for when a task
	//	(generated by a handler) could not be killed.
	ErrKindTaskNotKilled ErrKind = "task_not_killed"

	// ErrKindUnknownHandlerError represents an unknown handler
	// error.
	ErrKindUnknownHandlerError ErrKind = "unknown_handler_error"

	// ErrKindUnknownTaskError represents an unknown task
	// error.
	ErrKindUnknownTaskError ErrKind = "unknown_task_error"
)

// Error represents an occamy err.
type Error struct {
	err  error   // The underlying error
	kind ErrKind // The kind of the error
}

// NewError creates a new Error. If the error inputted is nil, then nil will be returned.
func NewError(err error, kind ErrKind) error {
	if err == nil {
		return nil
	}

	return &Error{
		kind: kind,
		err:  err,
	}
}

// Error returns a description of the error and is required to implement the builtin error interface.
func (c *Error) Error() string {
	return c.err.Error()
}

// Kind returns the error kind.
func (c *Error) Kind() ErrKind {
	return c.kind
}

// Unwrap will return the underlying error.
func (c *Error) Unwrap() error {
	return c.err
}

// ExtractErrorKind finds the first error in err's chain that is an occamy
// Error and returns the err kind along with a bool to indicate that a
// Error was found. If an occamy Error is not found a value of false for
// the bool will be returned.
func ExtractErrorKind(err error) (ErrKind, bool) {
	if err == nil {
		return "", false
	}

	var target *Error
	if !errors.As(err, &target) {
		return "", false
	}

	return target.kind, true
}

func convertErrorIfNotOccamyError(err error, kind ErrKind) error {
	if _, ok := ExtractErrorKind(err); !ok {
		return NewError(err, kind)
	}

	return err
}

func convertErrorIfNotLocalErrorOrMismatch(err error, kind ErrKind, alternatives ...ErrKind) error {
	actualKind, ok := ExtractErrorKind(err)
	if !ok {
		return NewError(err, kind)
	}

	for _, k := range append(alternatives, kind) {
		if k == actualKind {
			return err
		}
	}

	return NewError(err, kind)
}
